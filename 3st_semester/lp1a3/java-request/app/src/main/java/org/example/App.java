/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.example;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.ProxySelector;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;

class Joke {
    private int id;
    private String type;
    private String setup;
    @JsonProperty("punchline")
    private String punchLine;
    
    public int getId() {
        return id;
    }
    
    public void setId(int id) {
        this.id = id;
    }
    
    public String getType() {
        return type;
    }
    
    public void setType(String type) {
        this.type = type;
    }
    
    public String getSetup() {
        return setup;
    }
    
    public void setSetup(String setup) {
        this.setup = setup;
    }
    
    public String getPunchLine() {
        return punchLine;
    }
    
    public void setPunchLine(String punchLine) {
        this.punchLine = punchLine;
    }

    @Override
    public String toString() {
        return "Joke [id=" + id + ", type=" + type + ", setup=" + setup + ", punchLine=" + punchLine + "]";
    }

}

@JsonIgnoreProperties(ignoreUnknown = true)
class Endereco {
    @JsonProperty("cep")
    public String cep;
    
    @JsonProperty("address")
    public String endereco;
    
    @JsonProperty("state")
    public String uf;
    
    @JsonProperty("city")
    public String cidade;
    
    @JsonProperty("district")
    public String bairro;

    @Override
    public String toString() {
        return "Endereco [cep=" + cep + ", endereco=" + endereco + ", uf=" + uf + ", cidade=" + cidade + ", bairro="
                + bairro + "]";
    }

}

public class App {

    public static Endereco buscarEndereco(String cep) throws IOException, InterruptedException {
        HttpClient client = HttpClient.newBuilder()
        .proxy(ProxySelector.of(new InetSocketAddress("proxy.spo.ifsp.edu.br", 3128)))
        .build();

        String uri = "https://cep.awesomeapi.com.br/json/" + cep;

        HttpRequest request = HttpRequest.newBuilder()
            .uri(URI.create(uri))
            .GET()
            .build();

        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        ObjectMapper mapper = new ObjectMapper();

        Endereco endereco = mapper.readValue(response.body(), Endereco.class);

        return endereco;
    }

    public static Joke randomJoke() throws IOException, InterruptedException {
        // CLIENT HTTP
        // HttpClient client = HttpClient.newHttpClient();
        HttpClient client = HttpClient.newBuilder()
        .proxy(ProxySelector.of(new InetSocketAddress("proxy.spo.ifsp.edu.br", 3128)))
        .build();

        // REQUEST
        HttpRequest request = HttpRequest.newBuilder()
            .uri(URI.create("https://official-joke-api.appspot.com/random_joke"))
            .GET()
            .build();

        // RESPONSE
        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        // System.out.println(response.statusCode());
        // System.out.println(response.body());

        // CONVERTER STRING PARA OBJETO
        // MAPPER

        ObjectMapper mapper = new ObjectMapper();
        
        Joke joke = mapper.readValue(response.body(), Joke.class);

        return joke;
    }

    public static List<Joke> randomTen() throws IOException, InterruptedException {
        HttpClient client = HttpClient.newBuilder()
        .proxy(ProxySelector.of(new InetSocketAddress("proxy.spo.ifsp.edu.br", 3128)))
        .build();

        HttpRequest request = HttpRequest.newBuilder()
            .uri(URI.create("https://official-joke-api.appspot.com/random_ten"))
            .GET()
            .build();

        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        ObjectMapper mapper = new ObjectMapper();
        
        TypeReference<List<Joke>> type = new TypeReference<List<Joke>>() {};
        List<Joke> jokes = mapper.readValue(response.body(), type);

        return jokes;
    }

    public static void main(String[] args) throws IOException, InterruptedException {
        Joke joke1 = randomJoke();
        Joke joke2 = randomJoke();

        System.out.println(joke1);
        System.out.println(joke2);

        for (Joke joke : randomTen()) {
            System.out.println(joke);
        }

        System.out.println(buscarEndereco("03759040"));
    }
}
